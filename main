import telebot
import sqlite3
from telebot import types
from datetime import datetime
import random
import re

bot = telebot.TeleBot('6717203066:AAFTeOlXXp22qUyOcCm7AznOuMu5ruMEjl0')

morning = ['–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?', "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ?",
           '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –í–∞–º –ø–æ–ª–µ–∑–µ–Ω?']
afterning = ['–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?', "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ?",
             '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –í–∞–º –ø–æ–ª–µ–∑–µ–Ω?']
evening = ['–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?', "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ?",
           '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –í–∞–º –ø–æ–ª–µ–∑–µ–Ω?']
night = ['–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?', "–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ?",
         '–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –í–∞–º –ø–æ–ª–µ–∑–µ–Ω?']

sp = []
bro = {}
users = {}


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    bro[f"{str(message.from_user.id)}"] = []
    print(bro)
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–µ–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    button1 = types.InlineKeyboardButton(text="üå≠ –ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É", url="https://google.com")
    button2 = types.InlineKeyboardButton(text="üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", callback_data="broni")
    button3 = types.InlineKeyboardButton(text="5Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url="https://google.com")
    button4 = types.InlineKeyboardButton(text="üöïÔ∏è –ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏?", callback_data="button4")
    button5 = types.InlineKeyboardButton(text="‚ùìÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    markup.row(button4, button5)
    current_time = datetime.now()
    if current_time.hour in [5, 6, 7, 8, 9, 10, 11]:
        bot.send_message(message.chat.id, random.choice(morning), reply_markup=markup)
    elif current_time.hour in [12, 13, 14, 15, 16]:
        bot.send_message(message.chat.id, random.choice(afterning), reply_markup=markup)
    elif current_time.hour in [17, 18, 19, 20, 21]:
        bot.send_message(message.chat.id, random.choice(evening), reply_markup=markup)
    else:
        bot.send_message(message.chat.id, random.choice(night), reply_markup=markup)


@bot.message_handler(commands=['menu'])
def menu(message, page=1, previous_message=None):
    connect = sqlite3.connect("menu")
    cursor = connect.cursor()

    pages_count_query = cursor.execute(f"SELECT COUNT(*) FROM dishes").fetchall()
    pages_count = str(pages_count_query[0])

    product_query = cursor.execute(f"SELECT title, description, photo, price FROM dishes WHERE page = ?;",
                                   (page,))
    title, description, photo, price = product_query.fetchone()

    buttons = types.InlineKeyboardMarkup()
    if page != 1:
        left = page - 1
    else:
        left = 7
    if page != 7:
        right = page + 1
    else:
        right = 1

    left_button = types.InlineKeyboardButton("‚Üê", callback_data=f'to {left}')
    page_button = types.InlineKeyboardButton(f"{str(page)}/{str(pages_count)[1:2]}", callback_data='_')
    right_button = types.InlineKeyboardButton("‚Üí", callback_data=f'to {right}')
    buy_button = types.InlineKeyboardButton("–ö–£–ü–ò–¢–¨", callback_data='buy')
    buttons.add(left_button, page_button, right_button)
    buttons.add(buy_button)

    try:
        try:
            pho = open(photo, 'rb')
        except:
            pho = photo
        msg = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: "
        msg += f"{description}\n"
        msg += f"–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π\n"

        bot.send_photo(message.chat.id, photo=pho, caption=msg, reply_markup=buttons)
    except:
        msg = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: "
        msg += f"{description}\n"
        msg += f"–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π\n"

        bot.send_message(message.chat.id, msg, reply_markup=buttons)
    try:
        bot.delete_message(message.chat.id, previous_message.id)
    except:
        pass


@bot.message_handler(commands=['br'])
def welcome(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ–π–¥–µ—Ç —Å –í–∞–º–∏?')
    bot.register_next_step_handler(message, second)


def second(message):
    chat_id = message.chat.id
    name = message.text
    bro[f"{str(message.from_user.id)}"].append(name)
    bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫')
    bot.register_next_step_handler(message, third)


def third(message):
    chat_id = message.chat.id
    name = message.text
    bro[str(message.from_user.id)].append(name)
    bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å')
    bot.register_next_step_handler(message, four)


def four(message):
    chat_id = message.chat.id
    name = message.text
    if "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ" not in name:
        bro[str(message.from_user.id)].append(name)
        bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è')
    else:
        bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â—ë —Ä–∞–∑.')
    bot.register_next_step_handler(message, five)
    print(bro)


def five(message):
    global bro
    name = message.text
    result = re.match(r"^\+?[78][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$", name)
    if result:
        bro[str(message.from_user.id)].append(name)
        print(bro)
        button = types.InlineKeyboardMarkup()
        no = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='no')
        yes = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='yes')
        button.add(no)
        button.add(yes)
        chat_id = message.chat.id
        surname = message.text
        bro[str(message.from_user.id)].append(surname)
        bot.send_message(chat_id, f'''–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑: 
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {str(message.from_user.id)[0]}
    –í—Ä–µ–º—è: {str(message.from_user.id)[1]}
    –î–æ–ø –ø–æ–∂–µ–ª–∞–Ω–∏—è: {str(message.from_user.id)[2]}''', reply_markup=button)
    else:
        buttons = types.InlineKeyboardMarkup()
        reset = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data='reset')
        helpmenu = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menuuu')
        buttons.add(reset)
        buttons.add(helpmenu)
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ', reply_markup=buttons)


def send_chef(message):
    bot.send_message(1970887100, message)


def question(message):
    current = datetime.now()
    if int(current.hour) in [6, 7, 8, 9, 10, 11]:
        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å".format(
                             message.from_user,
                             bot.get_me()),
                         parse_mode='html')
    elif int(current.hour) in [12, 13, 14, 15, 16]:
        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å".format(
                             message.from_user,
                             bot.get_me()),
                         parse_mode='html')

    # bot.send_message(chat_id="6361272148", text=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name}")
    elif int(current.hour) in [17, 18, 19, 20, 21]:
        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å".format(
                             message.from_user,
                             bot.get_me()),
                         parse_mode='html')
    else:
        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å".format(
                             message.from_user,
                             bot.get_me()),
                         parse_mode='html')
    bot.register_next_step_handler(message, help_bot)


def help_bot(message):
    sp.append((message.message_id, message.chat.id))
    bot.forward_message(1970887100, message.chat.id, message.message_id)
    markup_inline = types.InlineKeyboardMarkup([[
        types.InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'answer{message.chat.id}')
    ], [
        types.InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'delete{message.chat.id}')
    ]])
    bot.send_message(1970887100, f"–î–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_inline)
    bot.register_next_step_handler(message, help_bot)


@bot.message_handler(commands=["requests"], func=lambda m: int(m.chat.id) == int(1970887100))
def all_messages(message):
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
    for i, req in enumerate(sp):
        bot.forward_message(1970887100, req[1], req[0])
        markup_inline = types.InlineKeyboardMarkup([[
            types.InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'answer{message.chat.id}')
        ], [
            types.InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'delete{message.chat.id}')
        ]])
        bot.send_message(message.chat.id, f"–î–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_inline)


def send_answer(message: types.Message, call, chat_id):
    bot.send_message(call.message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    bot.send_message(chat_id, message.text)
    for i, req in enumerate(sp):
        if int(req[1]) == int(chat_id):
            del sp[i]


@bot.callback_query_handler(func=lambda call: True)
def function(call):
    global bro
    if call.data == "button4":
        bot.send_location(call.message.chat.id, 55, 37)
    if 'to' in call.data:
        page = int(call.data.split(' ')[1])
        menu(call.message, page=page, previous_message=call.message)
    if call.data == "question":
        question(message=call.message)
    if call.data == "broni":
        welcome(message=call.message)
    if call.data == "reset":
        four(message=call.message)
    if call.data.startswith("answer"):
        chat_id = int(call.data[6:])

        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        bot.register_next_step_handler(call.message, lambda msg: send_answer(msg, call, chat_id))
    if call.data.startswith("delete"):
        chat_id = int(call.data[6:])
        bot.send_message(chat_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—Å—á–∏—Ç–∞–ª –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–ª–æ—Ö–∏–º")
    if call.data == "no":
        bot.send_message(call.message.chat.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞, –Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑')
        bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data == "yes":
        send_chef(message=f"""–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {bro[str(call.from_user.id)][0]} 
–í—Ä–µ–º—è: {bro[str(call.from_user.id)][1]}
–î–æ–ø –ø–æ–∂–µ–ª–∞–Ω–∏—è: {bro[str(call.from_user.id)][2]}
–¢–µ–ª–µ—Ñ–æ–Ω: {bro[str(call.from_user.id)][-1]}""")


bot.polling(none_stop=True)
